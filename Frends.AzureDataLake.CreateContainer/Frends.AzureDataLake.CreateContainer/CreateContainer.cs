using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Storage.Files.DataLake;
using Frends.AzureDataLake.CreateContainer.Definitions;

namespace Frends.AzureDataLake.CreateContainer;

/// <summary>
/// Azure Data Lake Task.
/// </summary>
public static class AzureDataLake
{
    /// <summary>
    /// Frends Task for creating a container to Azure Data Lake.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureDataLake.CreateContainer)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string Uri }</returns>
    public static async Task<Result> CreateContainer(
        [PropertyTab] Input input,
        CancellationToken cancellationToken
    )
    {
        DataLakeFileSystemClient container = GetDataLakeContainer(input);
        await container.CreateIfNotExistsAsync(null, cancellationToken);
        return new Result(true, container.Uri.ToString());
    }

    private static DataLakeFileSystemClient GetDataLakeContainer(Input input)
    {
        DataLakeServiceClient dataLakeServiceClient;

        switch (input.ConnectionMethod)
        {
            case ConnectionMethod.ConnectionString:
                dataLakeServiceClient = new DataLakeServiceClient(input.ConnectionString);
                return dataLakeServiceClient.GetFileSystemClient(input.ContainerName);
            case ConnectionMethod.OAuth2:
                var credentials = new ClientSecretCredential(
                    input.TenantID,
                    input.ApplicationID,
                    input.ClientSecret,
                    new ClientSecretCredentialOptions()
                );
                dataLakeServiceClient = new DataLakeServiceClient(
                    new Uri($"https://{input.StorageAccountName}.dfs.core.windows.net"),
                    credentials
                );
                return dataLakeServiceClient.GetFileSystemClient(input.ContainerName);
            default:
                throw new NotSupportedException();
        }
    }
}
