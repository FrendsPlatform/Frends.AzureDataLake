namespace Frends.AzureDataLake.ListFiles;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Azure.Identity;
using Azure.Storage.Files.DataLake;
using Frends.AzureDataLake.ListFiles.Definitions;

/// <summary>
/// Main class of the Task.
/// </summary>
public class AzureDataLake
{
    /// <summary>
    /// List files and directories from Azure Data Lake container.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureDataLake.ListFiles)
    /// </summary>
    /// <param name="source">Source connection parameters.</param>
    /// <param name="options">Options for the task</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task</param>
    /// <returns>Object { List&lt;FileData&gt; FileList [ { string Name, string URL } ] }</returns>
    public static async Task<Result> ListFiles([PropertyTab] Source source, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        return new Result(await ListFileHandler(source, options, cancellationToken));
    }

    private static async Task<List<FileData>> ListFileHandler(Source source, Options options, CancellationToken cancellationToken)
    {
        var fileSystemClient = GetDataLakeContainer(source, cancellationToken);
        var fileListing = new List<FileData>();

        try
        {
            await foreach (var item in fileSystemClient.GetPathsAsync(
                path: options.DictionaryName,
                recursive: options.Recursive,  // Recursively list all files and directories
                cancellationToken: cancellationToken))
            {
                cancellationToken.ThrowIfCancellationRequested();

                fileListing.Add(new FileData
                {
                    IsDirectory = item.IsDirectory ?? false,
                    URL = $"{fileSystemClient.Uri}/{item.Name}",
                    Name = item.Name,
                });
            }    
            return fileListing;
        }
        catch (Exception ex)
        {
            throw new ArgumentException("ListFileHandler error: ", ex);
        }
    }

    internal static DataLakeFileSystemClient GetDataLakeContainer(
            Source src,
            CancellationToken token)
    {
        var client = src.ConnectionMethod switch
        {
            ConnectionMethod.ConnectionString => new DataLakeServiceClient(src.ConnectionString),
            ConnectionMethod.OAuth2
                => new DataLakeServiceClient(
                    new Uri($"https://{src.StorageAccountName}.dfs.core.windows.net"),
                    new ClientSecretCredential(
                        src.TenantID,
                        src.ApplicationID,
                        src.ClientSecret,
                        new ClientSecretCredentialOptions()
                    )
                ),
            _ => throw new InvalidEnumArgumentException(),
        };

        var container = client.GetFileSystemClient(src.ContainerName);

        return container;
    }
}
