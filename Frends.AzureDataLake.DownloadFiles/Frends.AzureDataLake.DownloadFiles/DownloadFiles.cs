using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Storage.Files.DataLake;
using Frends.AzureDataLake.DownloadFiles.Definitions;
using Frends.AzureDataLake.UploadFiles.Exceptions;

namespace Frends.AzureDataLake.DownloadFiles;

/// <summary>
/// Azure Data Lake Task.
/// </summary>
public static class AzureDataLake
{
    /// <summary>
    /// Downloads files from Azure Data Lake.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureDataLake.DownloadFiles)
    /// </summary>
    /// <param name="source">Source parameters.</param>
    /// <param name="destination">Destination parameters.</param>
    /// <param name="options">Options parameters.</param>
    /// <param name="token">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool IsSuccess, Dictionary&lt;string, string&gt; DownladedFiles, string ErrorMessage }</returns>
    public static async Task<Result> DownloadFiles(
        [PropertyTab] Source source,
        [PropertyTab] Destination destination,
        [PropertyTab] Options options,
        CancellationToken token
    )
    {
        var container = await GetDataLakeContainer(source, token);
        await Task.CompletedTask;
        return new Result();
    }

    private static async Task<DataLakeFileSystemClient> GetDataLakeContainer(
        Source src,
        CancellationToken token
    )
    {
        DataLakeServiceClient client = src.ConnectionMethod switch
        {
            ConnectionMethod.ConnectionString => new DataLakeServiceClient(src.ConnectionString),
            ConnectionMethod.OAuth2
                => new DataLakeServiceClient(
                    new Uri($"https://{src.StorageAccountName}.dfs.core.windows.net"),
                    new ClientSecretCredential(
                        src.TenantID,
                        src.ApplicationID,
                        src.ClientSecret,
                        new ClientSecretCredentialOptions()
                    )
                ),
            _ => throw new InvalidEnumArgumentException(),
        };

        var container = client.GetFileSystemClient(src.ContainerName);

        if (!await container.ExistsAsync(token))
            throw new ContainerNotFoundException(src.ContainerName);
        return container;
    }
}
