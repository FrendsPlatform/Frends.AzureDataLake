using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Storage.Files.DataLake;
using Frends.AzureDataLake.DownloadFiles.Definitions;
using Frends.AzureDataLake.DownloadFiles.Exceptions;
using Microsoft.Extensions.FileSystemGlobbing;
using static Frends.AzureDataLake.DownloadFiles.Definitions.Constants;

namespace Frends.AzureDataLake.DownloadFiles;

/// <summary>
/// Azure Data Lake Task.
/// </summary>
public static class AzureDataLake
{
    /// <summary>
    /// Downloads files from Azure Data Lake.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureDataLake.DownloadFiles)
    /// </summary>
    /// <param name="source">Source parameters.</param>
    /// <param name="destination">Destination parameters.</param>
    /// <param name="options">Options parameters.</param>
    /// <param name="token">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool IsSuccess, Dictionary&lt;string, string&gt; DownladedFiles, string ErrorMessage }</returns>
    public static async Task<Result> DownloadFiles(
        [PropertyTab] Source source,
        [PropertyTab] Destination destination,
        [PropertyTab] Options options,
        CancellationToken token
    )
    {
        try
        {
            ValidateDestinationParameters(destination);
            ValidateSourceParameters(source);

            var container = await GetDataLakeContainer(source, token);
            var paralelResults = new ConcurrentDictionary<string, string>();
            var allSrcFiles = container
                .GetPaths(recursive: true, cancellationToken: token)
                .Where(x => (bool)!x.IsDirectory)
                .Select(x => x.Name);
            var matches = new Matcher().AddInclude($"**/{source.FilePattern}").Match(allSrcFiles);

            await Parallel.ForEachAsync(
                matches.Files,
                async (match, token) =>
                {
                    var (srcFilePath, dstFilePath) = await DownloadFile(
                        match.Path,
                        destination,
                        container,
                        token
                    );
                    paralelResults.TryAdd(srcFilePath, dstFilePath);
                }
            );

            return new Result
            {
                IsSuccess = true,
                DownladedFiles = new Dictionary<string, string>(paralelResults)
            };
        }
        catch (Exception ex)
        {
            if (options.ThrowErrorOnFailure)
                throw;
            else
                return new Result { IsSuccess = false ,ErrorMessage = ex.Message };
        }
    }

    private static void ValidateDestinationParameters(Destination destination)
    {
        if (!Directory.Exists(destination.Directory))
            throw new InvalidInputException("Provided destintation directory doesn't exists");
    }

    private static void ValidateSourceParameters(Source src)
    {
        if (
            src.ConnectionMethod is ConnectionMethod.OAuth2
            && (
                src.ApplicationID is null
                || src.ClientSecret is null
                || src.TenantID is null
                || src.StorageAccountName is null
            )
        )
            throw new InvalidInputException(
                "Input.StorageAccountName, Input.ClientSecret, Input.ApplicationID and Input.TenantID parameters can't be empty when Input.ConnectionMethod = OAuth."
            );
        if (
            src.ConnectionMethod is ConnectionMethod.ConnectionString
            && string.IsNullOrWhiteSpace(src.ConnectionString)
        )
            throw new InvalidInputException(
                "ConnectionString parameter can't be empty when Input.ConnectionMethod = ConnectionString."
            );
        if (string.IsNullOrWhiteSpace(src.ContainerName))
            throw new InvalidInputException("ContainerName parameter can't be empty.");
        if (src.ContainerName.Any(char.IsUpper))
            throw new InvalidInputException("ContainerName can't contain upper letters.");
    }

    private static async Task<DataLakeFileSystemClient> GetDataLakeContainer(
        Source src,
        CancellationToken token
    )
    {
        DataLakeServiceClient client = src.ConnectionMethod switch
        {
            ConnectionMethod.ConnectionString => new DataLakeServiceClient(src.ConnectionString),
            ConnectionMethod.OAuth2
                => new DataLakeServiceClient(
                    new Uri($"https://{src.StorageAccountName}.blob.core.windows.net"),
                    new ClientSecretCredential(
                        src.TenantID,
                        src.ApplicationID,
                        src.ClientSecret,
                        new ClientSecretCredentialOptions()
                    )
                ),
            _ => throw new InvalidEnumArgumentException(),
        };

        var container = client.GetFileSystemClient(src.ContainerName);

        if (!await container.ExistsAsync(token))
            throw new ContainerNotFoundException(src.ContainerName);
        return container;
    }

    private static async Task<(string srcFilePath, string dstFilePath)> DownloadFile(
        string sourcePath,
        Destination destination,
        DataLakeFileSystemClient container,
        CancellationToken token
    )
    {
        var fileClient = container.GetFileClient(sourcePath);
        var destinationPath = Path.Combine(destination.Directory, sourcePath);
        if (!destination.Overwrite && File.Exists(destinationPath))
            return (fileClient.Uri.AbsoluteUri, "File already exists");
        Directory.CreateDirectory(Directory.GetParent(destinationPath).FullName);
        using FileStream downloadStream = File.Create(destinationPath);
        await fileClient.ReadToAsync(downloadStream, cancellationToken: token);
        return (fileClient.Uri.AbsoluteUri, destinationPath);
    }
}
