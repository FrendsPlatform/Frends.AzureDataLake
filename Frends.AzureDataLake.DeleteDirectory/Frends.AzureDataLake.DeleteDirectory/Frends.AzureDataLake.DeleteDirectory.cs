namespace Frends.AzureDataLake.DeleteDirectory;

using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Storage.Files.DataLake;
using Definitions;

/// <summary>
/// Main class of the Task.
/// </summary>
public static class AzureDataLake
{
    /// <summary>
    /// Frends Task for deleteing a directory in Azure Data Lake container.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureDataLake.DeleteDirectory)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { string DirectoryWasDeleted, string Message }</returns>
    public static async Task<Result> DeleteDirectory([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        if (input.ConnectionMethod is ConnectionMethod.OAuth2 && (input.ApplicationID is null || input.ClientSecret is null || input.TenantID is null || input.StorageAccountName is null))
            throw new ArgumentNullException("Input.StorageAccountName, Input.ClientSecret, Input.ApplicationID and Input.TenantID parameters can't be empty when Input.ConnectionMethod = OAuth.");
        if (string.IsNullOrWhiteSpace(input.ConnectionString) && input.ConnectionMethod is ConnectionMethod.ConnectionString)
            throw new ArgumentNullException("ConnectionString parameter can't be empty when Input.ConnectionMethod = ConnectionString.");
        if (string.IsNullOrWhiteSpace(input.ContainerName))
            throw new ArgumentNullException("ContainerName parameter can't be empty.");
        if (string.IsNullOrWhiteSpace(input.DirectoryName))
            throw new ArgumentNullException("DirectoryName parameter can't be empty.");

        var directory = GetDataLakeDirectory(input);

        var result = await directory.DeleteIfExistsAsync(null, cancellationToken);
        return new Result(result, "Directory deleted successfully.");
    }

    internal static DataLakeDirectoryClient GetDataLakeDirectory(Input input)
    {
        DataLakeServiceClient dataLakeServiceClient;
        DataLakeFileSystemClient fileSystemClient;

        switch (input.ConnectionMethod)
        {
            case ConnectionMethod.ConnectionString:
                dataLakeServiceClient = new DataLakeServiceClient(input.ConnectionString);
                fileSystemClient = dataLakeServiceClient.GetFileSystemClient(input.ContainerName);
                return fileSystemClient.GetDirectoryClient(input.DirectoryName);
            case ConnectionMethod.OAuth2:
                var credentials = new ClientSecretCredential(input.TenantID, input.ApplicationID, input.ClientSecret, new ClientSecretCredentialOptions());
                dataLakeServiceClient = new DataLakeServiceClient(new Uri($"https://{input.StorageAccountName}.dfs.core.windows.net"), credentials);
                fileSystemClient = dataLakeServiceClient.GetFileSystemClient(input.ContainerName);
                return fileSystemClient.GetDirectoryClient(input.DirectoryName);
            default: throw new NotSupportedException();
        }
    }
}
