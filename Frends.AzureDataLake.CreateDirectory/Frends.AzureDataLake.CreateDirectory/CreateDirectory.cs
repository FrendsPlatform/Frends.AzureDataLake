namespace Frends.AzureDataLake.CreateDirectory;

using System.ComponentModel;
using System.Threading;
using Frends.AzureDataLake.CreateDirectory.Definitions;
using System.Threading.Tasks;
using Azure.Storage.Files.DataLake;
using Azure.Identity;
using System;


/// <summary>
/// Main class of the Task.
/// </summary>
public static class AzureDataLake
{
    /// <summary>
    /// Frends Task for creating a directory in Azure Data Lake container.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AzureDataLake.CreateDirectory)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, string Uri }</returns>
    public static async Task<Result> CreateDirectory([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        try
        {
            var directory = GetDataLakeDirectory(input);
            await directory.CreateIfNotExistsAsync(null, cancellationToken);
            return new Result(true, directory.Uri.ToString());
        }
        catch (Exception ex)
        {
            throw new Exception("Creating a new directory caused an exception.", ex);
        }
    }

    internal static DataLakeDirectoryClient GetDataLakeDirectory(Input input)
    {
        DataLakeServiceClient dataLakeServiceClient;
        DataLakeFileSystemClient fileSystemClient;

        switch (input.ConnectionMethod)
        {
            case ConnectionMethod.ConnectionString:
                dataLakeServiceClient = new DataLakeServiceClient(input.ConnectionString);
                fileSystemClient = dataLakeServiceClient.GetFileSystemClient(input.ContainerName);
                return fileSystemClient.GetDirectoryClient(input.DirectoryName);
            case ConnectionMethod.OAuth2:
                var credentials = new ClientSecretCredential(input.TenantID, input.ApplicationID, input.ClientSecret, new ClientSecretCredentialOptions());
                dataLakeServiceClient = new DataLakeServiceClient(new Uri($"https://{input.StorageAccountName}.dfs.core.windows.net"), credentials);
                fileSystemClient = dataLakeServiceClient.GetFileSystemClient(input.ContainerName);
                return fileSystemClient.GetDirectoryClient(input.DirectoryName);
            default: throw new NotSupportedException();
        }
    }
}